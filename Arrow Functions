Arrow Functions:
-ES6 Version
-more readable and more structure
-anonymous functions(lambda functions)
-without function name but they are assigned to a variable.
Let c =()=>{
Console.log(“HI”)
}C()
Arrow Functions with Parameter:
Let x=(x,y)=>{
Console.log(x+y)
}
X(20,30)
X(40,50)

Arrow Function with one argument: without using parenthesis
Let greet=x=>console.log(x);
Greet(“hello”)
Arrow Function without argument:
let greet=()=>console.log(“hello”)
greet()
Arrow Function with an Expression:
Let 18;
Let welcome=(age<18)?
()=>console.log(“Hi Varsha”);
()=>console.log(“Hi Sam”);
Welcome()

Synchronous and Asynchronous:
-step by step
-one task
Example
function task1(){
console.log(“Task1:Start”)
}
function task2(){
console.log(“Task2:Start”)
}
function task3(){
console.log(“Task3:Start”)
}
task1()
task2()
task3()
Promise:
Three states
1)	Pending: still not completed(continuing)
2)	Fulfilled: task completed
3)	Rejected: the operation is failed

Practical Implementation:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <!-- <script>
        let C=()=>{
            console.log("Hi Sanjana")
        }
        C()
    </script> -->
    <!-- <script>
        let x=(a,b)=>{
            console.log(a+b)
            }
            x(20,30)
            x(40,50)
            
    </script> -->
    <!-- <script>
        //let greet=x=>console.log(x);
          // greet("hello")

          let greet=()=>console.log("Hello")
          greet()


    </script> -->
    <!-- <script>
        let age=18;
    let welcome=(age<18)?
   ()=>console.log("Hi Varsha"):
   ()=>console.log("Hi Sam");
   welcome()

    </script> -->

    <!-- <script>
        function task1() {
            console.log("Task1: Start")
        }
        function task2() {
            console.log("Task2: Start")
        }
        function task3() {
            console.log("Task3: Start")
        }
        task1()
        task2()
        task3()
    </script> -->

    <script>
        console.log("Hi Sanjana")
        setTimeout(() =>{
            console.log("Hi I am Waiting")
        },5000);
        console.log("I am in Lab")
    </script>
<script>
    let myPromise = new Promise((resolve,reject)=>
    { let success = true;
    if(success){
        resolve("task completed");
    }else{
        reject("task failed");
    }
   })
   </script>
</body>

</html>
